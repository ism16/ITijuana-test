// Jenkinsfile
// ITijuana

def getChangeString(changeLogSets) {
    MAX_MSG_LEN = 100
    def changeString = ""
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
        }
    }

    if (!changeString) {
        changeString = "No new changes"
    }
    return changeString
}

pipeline {

    agent any

    triggers { pollSCM('H/4 * * * *') }

    environment {
        GITHUB_ACCESS_KEY = credentials('jenkins-github-secret-key')
        DISCORD_WEBHOOK   = credentials('jenkins-discord-webhook')
    }
    
    options {
        timestamps()
        disableConcurrentBuilds()
    }

    stages {

        stage('Checkout') {
            steps{
                cleanWs()
                git branch: 'main', credentialsId: "${env.GITHUB_ACCESS_KEY}", url: 'git@github.com:ism16/ITijuana-test.git'
            }   
        }

        stage('Environment setup') {
            steps {
                sh '''
                    python3 -m venv venv
                    venv/bin/python -m pip install --upgrade pip
                    venv/bin/python -m pip install -r requirements.txt
                    '''
            }
        }


        stage('Static analysis'){
            steps {
                script {
                    try {
                        sh '''
                            source venv/bin/activate
                            mypy api
                            mypi challenges
                           '''
                    } catch (err) {
                        currentBuild.result = 'UNSTABLE'
                        echo '${err}'
                        echo 'static typing problems'
                    }
                }
            }
        }
        
        stage('Unit tests'){
            steps {
                sh '''
                    source venv/bin/activate
                    pytest
                   '''
            }
        }
        
    }

    post{
        always{
            script{
                changes = getChangeString(currentBuild.changeSets)
                echo "${changes}"
            }
            
            withEnv([]){
                discordSend description: changes, footer: '', image: '', link: env.BUILD_URL, result: currentBuild.result, thumbnail: '', title: env.JOB_BASE_NAME, webhookURL: '"${env.DISCORD_WEBHOOK}"'
            }
        }
    }
}